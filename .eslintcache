[{"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\index.js":"1","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\reportWebVitals.js":"2","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\App.js":"3","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\contexts\\ColorModelsContext.jsx":"4","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\contexts\\FractalsContext.jsx":"5","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\contexts\\AffineTransformationsContext.jsx":"6","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ColorModels.jsx":"7","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\Fractals\\Fractals.jsx":"8","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\AffineTransformations\\AffineTransformations.jsx":"9","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\Main\\Main.jsx":"10","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\Fractals\\fractal\\fractal.js":"11","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ColorModelsView.jsx":"12","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\AffineTransformations\\AffineTransformationsView.jsx":"13","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ColorModelsProperties.jsx":"14","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\AffineTransformations\\AffineTransformationsProperties.jsx":"15","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\layouts\\MainWrapper.jsx":"16","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\layouts\\SecondLayout.jsx":"17","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ConvertColorProperties.jsx":"18","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\FileProperties.jsx":"19"},{"size":611,"mtime":1608491724456,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1608408671882,"results":"22","hashOfConfig":"21"},{"size":1324,"mtime":1608491724452,"results":"23","hashOfConfig":"21"},{"size":785,"mtime":1609182303294,"results":"24","hashOfConfig":"21"},{"size":310,"mtime":1608491724455,"results":"25","hashOfConfig":"21"},{"size":585,"mtime":1608491724453,"results":"26","hashOfConfig":"21"},{"size":547,"mtime":1608491724464,"results":"27","hashOfConfig":"21"},{"size":5250,"mtime":1608841895125,"results":"28","hashOfConfig":"21"},{"size":617,"mtime":1608491724462,"results":"29","hashOfConfig":"21"},{"size":1128,"mtime":1608491724475,"results":"30","hashOfConfig":"21"},{"size":3343,"mtime":1608841895126,"results":"31","hashOfConfig":"21"},{"size":3285,"mtime":1609182316706,"results":"32","hashOfConfig":"21"},{"size":5367,"mtime":1609184092652,"results":"33","hashOfConfig":"21"},{"size":383,"mtime":1608491724466,"results":"34","hashOfConfig":"21"},{"size":5175,"mtime":1609182316703,"results":"35","hashOfConfig":"21"},{"size":3083,"mtime":1609182316699,"results":"36","hashOfConfig":"21"},{"size":2350,"mtime":1609182316700,"results":"37","hashOfConfig":"21"},{"size":3451,"mtime":1609182316707,"results":"38","hashOfConfig":"21"},{"size":1525,"mtime":1609182316708,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"b21geu",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\index.js",[],["83","84"],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\reportWebVitals.js",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\App.js",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\contexts\\ColorModelsContext.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\contexts\\FractalsContext.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\contexts\\AffineTransformationsContext.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ColorModels.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\Fractals\\Fractals.jsx",["85"],"import { SecondLayout } from \"layouts/SecondLayout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { drawCanvas, drawCanvas2 } from \"./fractal/fractal\";\r\nimport c from \"./Fractal.module.scss\";\r\nimport cn from \"classnames\";\r\n// import \"./fractal/fractal.js\";\r\nexport const Fractals = () => {\r\n  const [sliderValue, setSliderValue] = useState(1);\r\n  const [animationActive, setAnimationActive] = useState(false);\r\n  const [canvasTSelected, setCanvasTSelected] = useState(false);\r\n  const [selectedColor, setSelectedColor] = useState(\"black\");\r\n  const canvas = useRef(null);\r\n  // const context = canvas.current.getContext(\"2d\");\r\n\r\n  useEffect(() => {\r\n    document.body.style.backgroundColor = \"white\";\r\n    const context = canvas.current.getContext(\"2d\");\r\n    if (canvasTSelected) {\r\n      drawCanvas2(canvas.current, context, sliderValue, animationActive);\r\n    } else {\r\n      drawCanvas(canvas.current, context, sliderValue, animationActive);\r\n    }\r\n    return () => {\r\n      document.body.style.backgroundColor = \"#0f3460\";\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={c.fractalWrapper}>\r\n      <SecondLayout>\r\n        <div className={c.content}>\r\n          <div className={c.buttons}>\r\n            <div\r\n              className={cn(c.button, canvasTSelected && c.active)}\r\n              onClick={() => {\r\n                setCanvasTSelected(true);\r\n                drawCanvas2(\r\n                  canvas.current,\r\n                  canvas.current.getContext(\"2d\"),\r\n                  sliderValue,\r\n                  selectedColor,\r\n                  animationActive\r\n                );\r\n              }}\r\n            >\r\n              T-square\r\n            </div>\r\n            <div\r\n              className={cn(c.button, !canvasTSelected && c.active)}\r\n              onClick={() => {\r\n                setCanvasTSelected(false);\r\n                if (canvasTSelected) {\r\n                  drawCanvas(\r\n                    canvas.current,\r\n                    canvas.current.getContext(\"2d\"),\r\n                    sliderValue,\r\n                    selectedColor,\r\n                    animationActive\r\n                  );\r\n                } else {\r\n                  drawCanvas2(\r\n                    canvas.current,\r\n                    canvas.current.getContext(\"2d\"),\r\n                    sliderValue,\r\n                    selectedColor,\r\n                    animationActive\r\n                  );\r\n                }\r\n              }}\r\n            >\r\n              H-tree\r\n            </div>\r\n          </div>\r\n          <div className={c.iterations}>\r\n            <div className={c.title}>Iterations:</div>\r\n            <div className={c.count}>{sliderValue}</div>\r\n          </div>\r\n          <div className=\"slidecontainer\">\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={10}\r\n              step={1}\r\n              value={sliderValue}\r\n              onChange={(e) => {\r\n                // @ts-ignore\r\n                setSliderValue(e.target.value);\r\n                console.log(\"slider value \" + sliderValue);\r\n              }}\r\n              className=\"slider\"\r\n              id=\"myRange\"\r\n            />\r\n            <div className={c.buttonWrapper}>\r\n              <button\r\n                onClick={() => {\r\n                  if (canvasTSelected) {\r\n                    drawCanvas2(\r\n                      canvas.current,\r\n                      canvas.current.getContext(\"2d\"),\r\n                      sliderValue,\r\n                      selectedColor,\r\n                      animationActive\r\n                    );\r\n                  } else {\r\n                    drawCanvas(\r\n                      canvas.current,\r\n                      canvas.current.getContext(\"2d\"),\r\n                      sliderValue,\r\n                      selectedColor,\r\n                      animationActive\r\n                    );\r\n                  }\r\n                }}\r\n              >\r\n                draw\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={c.animation}>\r\n            <div\r\n              className={cn(c.checkbox, animationActive && c.active)}\r\n              onClick={() => {\r\n                setAnimationActive(!animationActive);\r\n              }}\r\n            ></div>\r\n            <div className={c.title}> Step by step animation</div>\r\n          </div>\r\n          <div className={c.color}>\r\n            <div className={c.color__title}>Color</div>\r\n            <div className={c.color__selectWrapper}>\r\n              <select\r\n                onChange={(e) => {\r\n                  setSelectedColor(e.target.value);\r\n                }}\r\n              >\r\n                <option value=\"purple\">Purple</option>\r\n                <option value=\"green\">Green</option>\r\n                <option selected value=\"black\">\r\n                  Black\r\n                </option>\r\n                <option value=\"red\">Red</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </SecondLayout>\r\n      <div className={c.main}>\r\n        <canvas ref={canvas} id=\"c\" height=\"600\" width=\"840\"></canvas>\r\n        {/* <canvas id=\"d\" height=\"600\" width=\"840\"></canvas> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\AffineTransformations\\AffineTransformations.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\Main\\Main.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\Fractals\\fractal\\fractal.js",["86"],"export const drawCanvas = (canvas, context, depth, color, animationActive) => {\r\n  context.strokeStyle = color;\r\n  console.log(depth);\r\n  const center = {\r\n    x: canvas.width / 2.0,\r\n    y: canvas.height / 2.0,\r\n  };\r\n\r\n  // constants\r\n  const sqrt2 = Math.sqrt(2);\r\n  const len = canvas.width / sqrt2 / sqrt2;\r\n\r\n  // recursive func\r\n  const hTree = async (point, len, depth) => {\r\n    if (depth === 0) {\r\n      return;\r\n    }\r\n    if (animationActive) {\r\n      await sleep(1000);\r\n    }\r\n    // draw horizontal line\r\n    const h1 = { x: point.x - len / 2.0, y: point.y };\r\n    const h2 = { x: point.x + len / 2.0, y: point.y };\r\n    drawLine(h1, h2);\r\n\r\n    // draw vertical lines\r\n    len = len / sqrt2;\r\n\r\n    const v1 = { x: h1.x, y: h1.y - len / 2.0 };\r\n    const v2 = { x: h1.x, y: h1.y + len / 2.0 };\r\n    drawLine(v1, v2);\r\n\r\n    const v3 = { x: h2.x, y: h2.y - len / 2.0 };\r\n    const v4 = { x: h2.x, y: h2.y + len / 2.0 };\r\n    drawLine(v3, v4);\r\n\r\n    // compute new length, depth\r\n    depth--;\r\n    len = len / sqrt2;\r\n\r\n    // recurse recurse recurse recurse\r\n    hTree(v1, len, depth);\r\n    hTree(v2, len, depth);\r\n    hTree(v3, len, depth);\r\n    hTree(v4, len, depth);\r\n  };\r\n\r\n  // line helper\r\n  const drawLine = (from, to) => {\r\n    // if (animationActive) {\r\n    //   setTimeout(() => {\r\n    //     context.beginPath();\r\n    //     context.moveTo(from.x, from.y);\r\n    //     context.lineTo(to.x, to.y);\r\n    //     context.stroke();\r\n    //   }, 2000);\r\n    // } else {\r\n    //   context.beginPath();\r\n    //   context.moveTo(from.x, from.y);\r\n    //   context.lineTo(to.x, to.y);\r\n    //   context.stroke();\r\n    // }\r\n    context.beginPath();\r\n    context.moveTo(from.x, from.y);\r\n    context.lineTo(to.x, to.y);\r\n    context.stroke();\r\n  };\r\n\r\n  // paint helper\r\n  const paint = () => {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    hTree(center, len, depth);\r\n  };\r\n\r\n  // fire away\r\n  paint();\r\n};\r\n\r\nlet depth = 2;\r\nfunction sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\nexport const drawCanvas2 = (\r\n  canvas1,\r\n  context1,\r\n  depth1,\r\n  color,\r\n  animationActive\r\n) => {\r\n  context1.strokeStyle = \"#00386B\";\r\n\r\n  const center1 = {\r\n    x: canvas1.width / 2.0,\r\n    y: canvas1.height / 2.0,\r\n  };\r\n\r\n  const len1 = canvas1.height / 2;\r\n\r\n  const paint1 = async () => {\r\n    context1.clearRect(0, 0, canvas1.width, canvas1.height);\r\n    tSquare(center1, len1, depth1);\r\n  };\r\n\r\n  const tSquare = async (point, length1, depth) => {\r\n    if (depth === 0) {\r\n      return;\r\n    }\r\n    // draw central square\r\n    context1.fillStyle = color;\r\n    if (animationActive) {\r\n      await sleep(1000);\r\n    }\r\n\r\n    context1.fillRect(\r\n      point.x - length1 / 2,\r\n      point.y - length1 / 2,\r\n      length1,\r\n      length1\r\n    );\r\n    depth--;\r\n    length1 = length1 / 2;\r\n\r\n    var v1 = { x: point.x - length1, y: point.y - length1 };\r\n    var v2 = { x: point.x + length1, y: point.y + length1 };\r\n\r\n    var v3 = { x: point.x - length1, y: point.y + length1 };\r\n    var v4 = { x: point.x + length1, y: point.y - length1 };\r\n    // recurse recurse recurse recurse\r\n\r\n    tSquare(v1, length1, depth);\r\n\r\n    tSquare(v2, length1, depth);\r\n\r\n    tSquare(v3, length1, depth);\r\n\r\n    tSquare(v4, length1, depth);\r\n  };\r\n  // window.requestAnimationFrame();\r\n  paint1();\r\n};\r\n","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ColorModelsView.jsx",["87","88","89"],"// @ts-nocheck\r\nimport React, {useContext, useRef, useEffect, useState} from 'react';\r\nimport s from './ColorModels.module.scss';\r\nimport {ColorModelsContext} from '../../contexts/ColorModelsContext';\r\nimport convert from 'color-convert';\r\nimport {files} from 'd3/dist/package';\r\n\r\nconst ColorModelsView = () => {\r\n  const {fileSrc, greenSaturation, setPixels, setImageSize} = useContext(\r\n    ColorModelsContext\r\n  );\r\n  const filterImageCanvasRef = useRef();\r\n  const initImageCanvasRef = useRef();\r\n  const imageRef = useRef();\r\n  const [isImageLoaded, setIsImageLoaded] = useState(false);\r\n  const [canvasUrl, setCanvasUrl] = useState('');\r\n  const imageData = useRef();\r\n\r\n  const onLoadImage = () => {\r\n    setIsImageLoaded(true);\r\n    setInitImageCanvas();\r\n    setFilterImageCanvas();\r\n  };\r\n\r\n  const setInitImageCanvas = () => {\r\n    const canvas = initImageCanvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const image = imageRef.current;\r\n    const width = image.clientWidth;\r\n    const height = image.clientHeight;\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n    setImageSize({width, height});\r\n    setPixels(getPixels(initImageCanvasRef).data);\r\n  };\r\n\r\n  const setFilterImageCanvas = () => {\r\n    const canvas = filterImageCanvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const image = imageRef.current;\r\n    const width = image.clientWidth;\r\n    const height = image.clientHeight;\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n  };\r\n\r\n  const getPixels = (ref) => {\r\n    const canvas = ref.current;\r\n    const ctx = canvas.getContext('2d');\r\n    return ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n  };\r\n\r\n  const filter = () => {\r\n    for (let i = 0; i < imageData.current.data.length; i += 4) {\r\n      let rgb = imageData.current.data.slice(i, i + 4);\r\n      let hsl = convert.rgb.hsl(rgb);\r\n\r\n      hsl[0] = 120;\r\n      hsl[1] = greenSaturation * 100;\r\n\r\n      rgb = convert.hsl.rgb(hsl);\r\n\r\n      imageData.current.data[i] = rgb[0];\r\n      imageData.current.data[i + 1] = rgb[1];\r\n      imageData.current.data[i + 2] = rgb[2];\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (fileSrc) {\r\n      setIsImageLoaded(false);\r\n      imageRef.current.onload = onLoadImage;\r\n    }\r\n  }, [fileSrc]);\r\n\r\n  useEffect(() => {\r\n    if (isImageLoaded) {\r\n      const canvas = filterImageCanvasRef.current;\r\n      const ctx = canvas.getContext('2d');\r\n      imageData.current = getPixels(filterImageCanvasRef);\r\n      filter();\r\n      ctx.putImageData(imageData.current, 0, 0);\r\n      setCanvasUrl(canvas.toDataURL());\r\n    }\r\n  }, [isImageLoaded, greenSaturation]);\r\n\r\n  return (\r\n    <div style={{height: '100%'}}>\r\n      <div className={s.IOContainer}>\r\n        {fileSrc && (\r\n          <>\r\n            <canvas ref={initImageCanvasRef}/>\r\n            <img src={fileSrc} ref={imageRef} className={s.IOImage} alt=\"initImage\"/>\r\n          </>\r\n        )}\r\n      </div>\r\n      <div className={s.IOContainer}>\r\n        {fileSrc && <canvas ref={filterImageCanvasRef}/>}\r\n      </div>\r\n      <a href={canvasUrl} download>\r\n        Click to download\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorModelsView;\r\n","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\AffineTransformations\\AffineTransformationsView.jsx",["90","91"],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ColorModelsProperties.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\AffineTransformations\\AffineTransformationsProperties.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\layouts\\MainWrapper.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\layouts\\SecondLayout.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ConvertColorProperties.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\FileProperties.jsx",["92"],"import React, { useContext, useRef } from \"react\";\r\nimport s from \"./ColorModels.module.scss\";\r\nimport { ColorModelsContext } from \"../../contexts/ColorModelsContext\";\r\nimport cn from \"classnames\";\r\nconst FileProperties = () => {\r\n  // @ts-ignore\r\n  const { setFileSrc, setGreenSaturation, greenSaturation } = useContext(\r\n    ColorModelsContext\r\n  );\r\n  const inputRef = useRef();\r\n  const timerId = useRef();\r\n\r\n  const handleUploadFile = () => {\r\n    // @ts-ignore\r\n    const file = inputRef.current.files[0];\r\n\r\n    if (file) {\r\n      const src = URL.createObjectURL(file);\r\n      setFileSrc(src);\r\n    }\r\n  };\r\n\r\n  const handleChangeGreenSaturation = ({ target: { value } }) => {\r\n    if (timerId) {\r\n      clearTimeout(timerId);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setGreenSaturation(value);\r\n    }, 50);\r\n  };\r\n\r\n  return (\r\n    <div className={s.fileForm}>\r\n      <div className={s.row}>\r\n        <label className={s.button}>\r\n          File\r\n          <input type=\"file\" ref={inputRef} />\r\n        </label>\r\n\r\n        <button onClick={handleUploadFile}>Upload</button>\r\n      </div>\r\n      <div className={s.green}>\r\n        <label htmlFor=\"greenSaturation\">\r\n          Green Saturation {greenSaturation}:\r\n        </label>\r\n      </div>\r\n      <input\r\n        style={{ width: \"100%\" }}\r\n        min={0}\r\n        max={1}\r\n        step={0.01}\r\n        type=\"range\"\r\n        value={greenSaturation}\r\n        onChange={handleChangeGreenSaturation}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileProperties;\r\n",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":26,"column":6,"nodeType":"99","endLine":26,"endColumn":8,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":80,"column":5,"nodeType":"103","messageId":"104","endLine":80,"endColumn":10},{"ruleId":"101","severity":1,"message":"105","line":6,"column":9,"nodeType":"103","messageId":"104","endLine":6,"endColumn":14},{"ruleId":"97","severity":1,"message":"106","line":80,"column":6,"nodeType":"99","endLine":80,"endColumn":15,"suggestions":"107"},{"ruleId":"97","severity":1,"message":"108","line":91,"column":6,"nodeType":"99","endLine":91,"endColumn":38,"suggestions":"109"},{"ruleId":"97","severity":1,"message":"110","line":62,"column":6,"nodeType":"99","endLine":62,"endColumn":18,"suggestions":"111"},{"ruleId":"97","severity":1,"message":"112","line":132,"column":6,"nodeType":"99","endLine":132,"endColumn":14,"suggestions":"113"},{"ruleId":"101","severity":1,"message":"114","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":10},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'animationActive', 'canvasTSelected', and 'sliderValue'. Either include them or remove the dependency array.","ArrayExpression",["117"],"no-unused-vars","'depth' is assigned a value but never used.","Identifier","unusedVar","'files' is defined but never used.","React Hook useEffect has a missing dependency: 'onLoadImage'. Either include it or remove the dependency array.",["118"],"React Hook useEffect has a missing dependency: 'filter'. Either include it or remove the dependency array.",["119"],"React Hook useEffect has a missing dependency: 'animating'. Either include it or remove the dependency array.",["120"],"React Hook useEffect has a missing dependency: 'pointsName'. Either include it or remove the dependency array.",["121"],"'cn' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [animationActive, canvasTSelected, sliderValue]",{"range":"132","text":"133"},"Update the dependencies array to be: [fileSrc, onLoadImage]",{"range":"134","text":"135"},"Update the dependencies array to be: [isImageLoaded, greenSaturation, filter]",{"range":"136","text":"137"},"Update the dependencies array to be: [animating, properties]",{"range":"138","text":"139"},"Update the dependencies array to be: [points, pointsName]",{"range":"140","text":"141"},[1068,1070],"[animationActive, canvasTSelected, sliderValue]",[2364,2373],"[fileSrc, onLoadImage]",[2702,2734],"[isImageLoaded, greenSaturation, filter]",[1989,2001],"[animating, properties]",[3918,3926],"[points, pointsName]"]