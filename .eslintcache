[{"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\index.js":"1","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\reportWebVitals.js":"2","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\App.js":"3","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\contexts\\FractalsContext.jsx":"4","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\contexts\\AffineTransformationsContext.jsx":"5","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\Main\\Main.jsx":"6","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ColorModels.jsx":"7","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\Fractals\\Fractals.jsx":"8","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\AffineTransformations\\AffineTransformations.jsx":"9","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\contexts\\ColorModelsContext.jsx":"10","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\Fractals\\fractal\\fractal.js":"11","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ColorModelsProperties.jsx":"12","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\AffineTransformations\\AffineTransformationsProperties.jsx":"13","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ColorModelsView.jsx":"14","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\AffineTransformations\\AffineTransformationsView.jsx":"15","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\layouts\\MainWrapper.jsx":"16","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\layouts\\SecondLayout.jsx":"17","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ConvertColorProperties.jsx":"18","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\FileProperties.jsx":"19"},{"size":611,"mtime":1608491724456,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1608408671882,"results":"22","hashOfConfig":"21"},{"size":1324,"mtime":1608491724452,"results":"23","hashOfConfig":"21"},{"size":310,"mtime":1608491724455,"results":"24","hashOfConfig":"21"},{"size":585,"mtime":1608491724453,"results":"25","hashOfConfig":"21"},{"size":1128,"mtime":1608491724475,"results":"26","hashOfConfig":"21"},{"size":547,"mtime":1608491724464,"results":"27","hashOfConfig":"21"},{"size":5250,"mtime":1608841895125,"results":"28","hashOfConfig":"21"},{"size":617,"mtime":1608491724462,"results":"29","hashOfConfig":"21"},{"size":785,"mtime":1608992008313,"results":"30","hashOfConfig":"21"},{"size":3343,"mtime":1608841895126,"results":"31","hashOfConfig":"21"},{"size":383,"mtime":1608491724466,"results":"32","hashOfConfig":"21"},{"size":4349,"mtime":1608491724462,"results":"33","hashOfConfig":"21"},{"size":2851,"mtime":1608992008316,"results":"34","hashOfConfig":"21"},{"size":5123,"mtime":1608994025389,"results":"35","hashOfConfig":"21"},{"size":2401,"mtime":1608992008314,"results":"36","hashOfConfig":"21"},{"size":2126,"mtime":1608491724459,"results":"37","hashOfConfig":"21"},{"size":2572,"mtime":1608992008317,"results":"38","hashOfConfig":"21"},{"size":1369,"mtime":1608992008318,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"b21geu",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\index.js",[],["82","83"],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\reportWebVitals.js",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\App.js",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\contexts\\FractalsContext.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\contexts\\AffineTransformationsContext.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\Main\\Main.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ColorModels.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\Fractals\\Fractals.jsx",["84"],"import { SecondLayout } from \"layouts/SecondLayout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { drawCanvas, drawCanvas2 } from \"./fractal/fractal\";\r\nimport c from \"./Fractal.module.scss\";\r\nimport cn from \"classnames\";\r\n// import \"./fractal/fractal.js\";\r\nexport const Fractals = () => {\r\n  const [sliderValue, setSliderValue] = useState(1);\r\n  const [animationActive, setAnimationActive] = useState(false);\r\n  const [canvasTSelected, setCanvasTSelected] = useState(false);\r\n  const [selectedColor, setSelectedColor] = useState(\"black\");\r\n  const canvas = useRef(null);\r\n  // const context = canvas.current.getContext(\"2d\");\r\n\r\n  useEffect(() => {\r\n    document.body.style.backgroundColor = \"white\";\r\n    const context = canvas.current.getContext(\"2d\");\r\n    if (canvasTSelected) {\r\n      drawCanvas2(canvas.current, context, sliderValue, animationActive);\r\n    } else {\r\n      drawCanvas(canvas.current, context, sliderValue, animationActive);\r\n    }\r\n    return () => {\r\n      document.body.style.backgroundColor = \"#0f3460\";\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={c.fractalWrapper}>\r\n      <SecondLayout>\r\n        <div className={c.content}>\r\n          <div className={c.buttons}>\r\n            <div\r\n              className={cn(c.button, canvasTSelected && c.active)}\r\n              onClick={() => {\r\n                setCanvasTSelected(true);\r\n                drawCanvas2(\r\n                  canvas.current,\r\n                  canvas.current.getContext(\"2d\"),\r\n                  sliderValue,\r\n                  selectedColor,\r\n                  animationActive\r\n                );\r\n              }}\r\n            >\r\n              T-square\r\n            </div>\r\n            <div\r\n              className={cn(c.button, !canvasTSelected && c.active)}\r\n              onClick={() => {\r\n                setCanvasTSelected(false);\r\n                if (canvasTSelected) {\r\n                  drawCanvas(\r\n                    canvas.current,\r\n                    canvas.current.getContext(\"2d\"),\r\n                    sliderValue,\r\n                    selectedColor,\r\n                    animationActive\r\n                  );\r\n                } else {\r\n                  drawCanvas2(\r\n                    canvas.current,\r\n                    canvas.current.getContext(\"2d\"),\r\n                    sliderValue,\r\n                    selectedColor,\r\n                    animationActive\r\n                  );\r\n                }\r\n              }}\r\n            >\r\n              H-tree\r\n            </div>\r\n          </div>\r\n          <div className={c.iterations}>\r\n            <div className={c.title}>Iterations:</div>\r\n            <div className={c.count}>{sliderValue}</div>\r\n          </div>\r\n          <div className=\"slidecontainer\">\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={10}\r\n              step={1}\r\n              value={sliderValue}\r\n              onChange={(e) => {\r\n                // @ts-ignore\r\n                setSliderValue(e.target.value);\r\n                console.log(\"slider value \" + sliderValue);\r\n              }}\r\n              className=\"slider\"\r\n              id=\"myRange\"\r\n            />\r\n            <div className={c.buttonWrapper}>\r\n              <button\r\n                onClick={() => {\r\n                  if (canvasTSelected) {\r\n                    drawCanvas2(\r\n                      canvas.current,\r\n                      canvas.current.getContext(\"2d\"),\r\n                      sliderValue,\r\n                      selectedColor,\r\n                      animationActive\r\n                    );\r\n                  } else {\r\n                    drawCanvas(\r\n                      canvas.current,\r\n                      canvas.current.getContext(\"2d\"),\r\n                      sliderValue,\r\n                      selectedColor,\r\n                      animationActive\r\n                    );\r\n                  }\r\n                }}\r\n              >\r\n                draw\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={c.animation}>\r\n            <div\r\n              className={cn(c.checkbox, animationActive && c.active)}\r\n              onClick={() => {\r\n                setAnimationActive(!animationActive);\r\n              }}\r\n            ></div>\r\n            <div className={c.title}> Step by step animation</div>\r\n          </div>\r\n          <div className={c.color}>\r\n            <div className={c.color__title}>Color</div>\r\n            <div className={c.color__selectWrapper}>\r\n              <select\r\n                onChange={(e) => {\r\n                  setSelectedColor(e.target.value);\r\n                }}\r\n              >\r\n                <option value=\"purple\">Purple</option>\r\n                <option value=\"green\">Green</option>\r\n                <option selected value=\"black\">\r\n                  Black\r\n                </option>\r\n                <option value=\"red\">Red</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </SecondLayout>\r\n      <div className={c.main}>\r\n        <canvas ref={canvas} id=\"c\" height=\"600\" width=\"840\"></canvas>\r\n        {/* <canvas id=\"d\" height=\"600\" width=\"840\"></canvas> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\AffineTransformations\\AffineTransformations.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\contexts\\ColorModelsContext.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\Fractals\\fractal\\fractal.js",["85"],"export const drawCanvas = (canvas, context, depth, color, animationActive) => {\r\n  context.strokeStyle = color;\r\n  console.log(depth);\r\n  const center = {\r\n    x: canvas.width / 2.0,\r\n    y: canvas.height / 2.0,\r\n  };\r\n\r\n  // constants\r\n  const sqrt2 = Math.sqrt(2);\r\n  const len = canvas.width / sqrt2 / sqrt2;\r\n\r\n  // recursive func\r\n  const hTree = async (point, len, depth) => {\r\n    if (depth === 0) {\r\n      return;\r\n    }\r\n    if (animationActive) {\r\n      await sleep(1000);\r\n    }\r\n    // draw horizontal line\r\n    const h1 = { x: point.x - len / 2.0, y: point.y };\r\n    const h2 = { x: point.x + len / 2.0, y: point.y };\r\n    drawLine(h1, h2);\r\n\r\n    // draw vertical lines\r\n    len = len / sqrt2;\r\n\r\n    const v1 = { x: h1.x, y: h1.y - len / 2.0 };\r\n    const v2 = { x: h1.x, y: h1.y + len / 2.0 };\r\n    drawLine(v1, v2);\r\n\r\n    const v3 = { x: h2.x, y: h2.y - len / 2.0 };\r\n    const v4 = { x: h2.x, y: h2.y + len / 2.0 };\r\n    drawLine(v3, v4);\r\n\r\n    // compute new length, depth\r\n    depth--;\r\n    len = len / sqrt2;\r\n\r\n    // recurse recurse recurse recurse\r\n    hTree(v1, len, depth);\r\n    hTree(v2, len, depth);\r\n    hTree(v3, len, depth);\r\n    hTree(v4, len, depth);\r\n  };\r\n\r\n  // line helper\r\n  const drawLine = (from, to) => {\r\n    // if (animationActive) {\r\n    //   setTimeout(() => {\r\n    //     context.beginPath();\r\n    //     context.moveTo(from.x, from.y);\r\n    //     context.lineTo(to.x, to.y);\r\n    //     context.stroke();\r\n    //   }, 2000);\r\n    // } else {\r\n    //   context.beginPath();\r\n    //   context.moveTo(from.x, from.y);\r\n    //   context.lineTo(to.x, to.y);\r\n    //   context.stroke();\r\n    // }\r\n    context.beginPath();\r\n    context.moveTo(from.x, from.y);\r\n    context.lineTo(to.x, to.y);\r\n    context.stroke();\r\n  };\r\n\r\n  // paint helper\r\n  const paint = () => {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    hTree(center, len, depth);\r\n  };\r\n\r\n  // fire away\r\n  paint();\r\n};\r\n\r\nlet depth = 2;\r\nfunction sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\nexport const drawCanvas2 = (\r\n  canvas1,\r\n  context1,\r\n  depth1,\r\n  color,\r\n  animationActive\r\n) => {\r\n  context1.strokeStyle = \"#00386B\";\r\n\r\n  const center1 = {\r\n    x: canvas1.width / 2.0,\r\n    y: canvas1.height / 2.0,\r\n  };\r\n\r\n  const len1 = canvas1.height / 2;\r\n\r\n  const paint1 = async () => {\r\n    context1.clearRect(0, 0, canvas1.width, canvas1.height);\r\n    tSquare(center1, len1, depth1);\r\n  };\r\n\r\n  const tSquare = async (point, length1, depth) => {\r\n    if (depth === 0) {\r\n      return;\r\n    }\r\n    // draw central square\r\n    context1.fillStyle = color;\r\n    if (animationActive) {\r\n      await sleep(1000);\r\n    }\r\n\r\n    context1.fillRect(\r\n      point.x - length1 / 2,\r\n      point.y - length1 / 2,\r\n      length1,\r\n      length1\r\n    );\r\n    depth--;\r\n    length1 = length1 / 2;\r\n\r\n    var v1 = { x: point.x - length1, y: point.y - length1 };\r\n    var v2 = { x: point.x + length1, y: point.y + length1 };\r\n\r\n    var v3 = { x: point.x - length1, y: point.y + length1 };\r\n    var v4 = { x: point.x + length1, y: point.y - length1 };\r\n    // recurse recurse recurse recurse\r\n\r\n    tSquare(v1, length1, depth);\r\n\r\n    tSquare(v2, length1, depth);\r\n\r\n    tSquare(v3, length1, depth);\r\n\r\n    tSquare(v4, length1, depth);\r\n  };\r\n  // window.requestAnimationFrame();\r\n  paint1();\r\n};\r\n","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ColorModelsProperties.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\AffineTransformations\\AffineTransformationsProperties.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ColorModelsView.jsx",["86","87"],"// @ts-nocheck\r\nimport React, { useContext, useRef, useEffect, useState } from \"react\";\r\nimport s from \"./ColorModels.module.scss\";\r\nimport { ColorModelsContext } from \"../../contexts/ColorModelsContext\";\r\nimport convert from \"color-convert\";\r\n\r\nconst ColorModelsView = () => {\r\n  const { fileSrc, greenSaturation, setPixels, setImageSize } = useContext(\r\n    ColorModelsContext\r\n  );\r\n  const canvasRef = useRef();\r\n  const imageRef = useRef();\r\n  const [isImageLoaded, setIsImageLoaded] = useState(false);\r\n  const imageData = useRef();\r\n\r\n  const onLoadImage = () => {\r\n    setIsImageLoaded(true);\r\n    setInitialCanvas();\r\n  };\r\n  let canvasUrl = \"\";\r\n\r\n  if (fileSrc) {\r\n    let canvas = document.getElementById(\"canvass\");\r\n    if (canvas) {\r\n      canvasUrl = canvas.toDataURL();\r\n    }\r\n  }\r\n  console.log(canvasUrl);\r\n  const setInitialCanvas = () => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const image = imageRef.current;\r\n    const width = image.clientWidth;\r\n    const height = image.clientHeight;\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n    setImageSize({ width, height });\r\n  };\r\n\r\n  const getPixels = () => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    return ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n  };\r\n\r\n  const filter = () => {\r\n    for (let i = 0; i < imageData.current.data.length; i += 4) {\r\n      let rgb = imageData.current.data.slice(i, i + 4);\r\n      let hsl = convert.rgb.hsl(rgb);\r\n\r\n      hsl[0] = 120;\r\n      hsl[1] = greenSaturation * 100;\r\n\r\n      rgb = convert.hsl.rgb(hsl);\r\n\r\n      imageData.current.data[i] = rgb[0];\r\n      imageData.current.data[i + 1] = rgb[1];\r\n      imageData.current.data[i + 2] = rgb[2];\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (fileSrc) {\r\n      setIsImageLoaded(false);\r\n      imageRef.current.onload = onLoadImage;\r\n    }\r\n  }, [fileSrc]);\r\n\r\n  useEffect(() => {\r\n    if (isImageLoaded) {\r\n      const canvas = canvasRef.current;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      imageData.current = getPixels();\r\n      filter();\r\n      ctx.putImageData(imageData.current, 0, 0);\r\n      setPixels(imageData.current.data);\r\n    }\r\n  }, [isImageLoaded, greenSaturation]);\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      <div className={s.IOContainer}>\r\n        {fileSrc && (\r\n          <img\r\n            ref={imageRef}\r\n            src={fileSrc}\r\n            className={s.IOImage}\r\n            alt={\"initImage\"}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className={s.IOContainer}>\r\n        {fileSrc && <canvas ref={canvasRef} id=\"canvass\" />}\r\n      </div>\r\n      <a href={canvasUrl} download>\r\n        Click to download\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorModelsView;\r\n","C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\AffineTransformations\\AffineTransformationsView.jsx",["88","89"],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\layouts\\MainWrapper.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\layouts\\SecondLayout.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\ConvertColorProperties.jsx",[],"C:\\Users\\ACER\\Desktop\\WebProject\\ComputerGraphics\\src\\pages\\ColorModels\\FileProperties.jsx",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":26,"column":6,"nodeType":"96","endLine":26,"endColumn":8,"suggestions":"97"},{"ruleId":"98","severity":1,"message":"99","line":80,"column":5,"nodeType":"100","messageId":"101","endLine":80,"endColumn":10},{"ruleId":"94","severity":1,"message":"102","line":70,"column":6,"nodeType":"96","endLine":70,"endColumn":15,"suggestions":"103"},{"ruleId":"94","severity":1,"message":"104","line":81,"column":6,"nodeType":"96","endLine":81,"endColumn":38,"suggestions":"105"},{"ruleId":"94","severity":1,"message":"106","line":62,"column":6,"nodeType":"96","endLine":62,"endColumn":18,"suggestions":"107"},{"ruleId":"94","severity":1,"message":"108","line":126,"column":6,"nodeType":"96","endLine":126,"endColumn":14,"suggestions":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'animationActive', 'canvasTSelected', and 'sliderValue'. Either include them or remove the dependency array.","ArrayExpression",["112"],"no-unused-vars","'depth' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'onLoadImage'. Either include it or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'filter' and 'setPixels'. Either include them or remove the dependency array.",["114"],"React Hook useEffect has a missing dependency: 'animating'. Either include it or remove the dependency array.",["115"],"React Hook useEffect has a missing dependency: 'pointsName'. Either include it or remove the dependency array.",["116"],"no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [animationActive, canvasTSelected, sliderValue]",{"range":"127","text":"128"},"Update the dependencies array to be: [fileSrc, onLoadImage]",{"range":"129","text":"130"},"Update the dependencies array to be: [isImageLoaded, greenSaturation, filter, setPixels]",{"range":"131","text":"132"},"Update the dependencies array to be: [animating, properties]",{"range":"133","text":"134"},"Update the dependencies array to be: [points, pointsName]",{"range":"135","text":"136"},[1068,1070],"[animationActive, canvasTSelected, sliderValue]",[1968,1977],"[fileSrc, onLoadImage]",[2276,2308],"[isImageLoaded, greenSaturation, filter, setPixels]",[1989,2001],"[animating, properties]",[3674,3682],"[points, pointsName]"]