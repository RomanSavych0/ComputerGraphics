[{"C:\\projects\\labFractals\\fractals\\src\\index.js":"1","C:\\projects\\labFractals\\fractals\\src\\reportWebVitals.js":"2","C:\\projects\\labFractals\\fractals\\src\\App.js":"3","C:\\projects\\labFractals\\fractals\\src\\contexts\\FractalsContext.jsx":"4","C:\\projects\\labFractals\\fractals\\src\\contexts\\AffineTransformationsContext.jsx":"5","C:\\projects\\labFractals\\fractals\\src\\contexts\\ColorModelsContext.jsx":"6","C:\\projects\\labFractals\\fractals\\src\\pages\\Fractals\\Fractals.jsx":"7","C:\\projects\\labFractals\\fractals\\src\\pages\\ColorModels\\ColorModels.jsx":"8","C:\\projects\\labFractals\\fractals\\src\\pages\\AffineTransformations\\AffineTransformations.jsx":"9","C:\\projects\\labFractals\\fractals\\src\\pages\\Main\\Main.jsx":"10","C:\\projects\\labFractals\\fractals\\src\\pages\\Fractals\\fractal\\fractal.js":"11","C:\\projects\\labFractals\\fractals\\src\\pages\\ColorModels\\ColorModelsView.jsx":"12","C:\\projects\\labFractals\\fractals\\src\\pages\\ColorModels\\ColorModelsProperties.jsx":"13","C:\\projects\\labFractals\\fractals\\src\\pages\\AffineTransformations\\AffineTransformationsProperties.jsx":"14","C:\\projects\\labFractals\\fractals\\src\\layouts\\MainWrapper.jsx":"15","C:\\projects\\labFractals\\fractals\\src\\pages\\AffineTransformations\\AffineTransformationsView.jsx":"16","C:\\projects\\labFractals\\fractals\\src\\layouts\\SecondLayout.jsx":"17","C:\\projects\\labFractals\\fractals\\src\\pages\\ColorModels\\ConvertColorProperties.jsx":"18","C:\\projects\\labFractals\\fractals\\src\\pages\\ColorModels\\FileProperties.jsx":"19"},{"size":611,"mtime":1608486010797,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":1324,"mtime":1608486010774,"results":"23","hashOfConfig":"21"},{"size":310,"mtime":1608486010794,"results":"24","hashOfConfig":"21"},{"size":585,"mtime":1608486010775,"results":"25","hashOfConfig":"21"},{"size":785,"mtime":1609007260800,"results":"26","hashOfConfig":"21"},{"size":5250,"mtime":1608505058427,"results":"27","hashOfConfig":"21"},{"size":547,"mtime":1608504389354,"results":"28","hashOfConfig":"21"},{"size":617,"mtime":1608504389348,"results":"29","hashOfConfig":"21"},{"size":1128,"mtime":1608486010824,"results":"30","hashOfConfig":"21"},{"size":3343,"mtime":1608505058427,"results":"31","hashOfConfig":"21"},{"size":3285,"mtime":1609077774238,"results":"32","hashOfConfig":"21"},{"size":383,"mtime":1608486010819,"results":"33","hashOfConfig":"21"},{"size":5175,"mtime":1609088199389,"results":"34","hashOfConfig":"21"},{"size":3083,"mtime":1609077767767,"results":"35","hashOfConfig":"21"},{"size":5123,"mtime":1608995597554,"results":"36","hashOfConfig":"21"},{"size":2350,"mtime":1609077767770,"results":"37","hashOfConfig":"21"},{"size":3451,"mtime":1609085261957,"results":"38","hashOfConfig":"21"},{"size":1525,"mtime":1609085892132,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"49d48r",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\projects\\labFractals\\fractals\\src\\index.js",[],["82","83"],"C:\\projects\\labFractals\\fractals\\src\\reportWebVitals.js",[],"C:\\projects\\labFractals\\fractals\\src\\App.js",[],"C:\\projects\\labFractals\\fractals\\src\\contexts\\FractalsContext.jsx",[],"C:\\projects\\labFractals\\fractals\\src\\contexts\\AffineTransformationsContext.jsx",[],"C:\\projects\\labFractals\\fractals\\src\\contexts\\ColorModelsContext.jsx",[],"C:\\projects\\labFractals\\fractals\\src\\pages\\Fractals\\Fractals.jsx",["84"],"import { SecondLayout } from \"layouts/SecondLayout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { drawCanvas, drawCanvas2 } from \"./fractal/fractal\";\r\nimport c from \"./Fractal.module.scss\";\r\nimport cn from \"classnames\";\r\n// import \"./fractal/fractal.js\";\r\nexport const Fractals = () => {\r\n  const [sliderValue, setSliderValue] = useState(1);\r\n  const [animationActive, setAnimationActive] = useState(false);\r\n  const [canvasTSelected, setCanvasTSelected] = useState(false);\r\n  const [selectedColor, setSelectedColor] = useState(\"black\");\r\n  const canvas = useRef(null);\r\n  // const context = canvas.current.getContext(\"2d\");\r\n\r\n  useEffect(() => {\r\n    document.body.style.backgroundColor = \"white\";\r\n    const context = canvas.current.getContext(\"2d\");\r\n    if (canvasTSelected) {\r\n      drawCanvas2(canvas.current, context, sliderValue, animationActive);\r\n    } else {\r\n      drawCanvas(canvas.current, context, sliderValue, animationActive);\r\n    }\r\n    return () => {\r\n      document.body.style.backgroundColor = \"#0f3460\";\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={c.fractalWrapper}>\r\n      <SecondLayout>\r\n        <div className={c.content}>\r\n          <div className={c.buttons}>\r\n            <div\r\n              className={cn(c.button, canvasTSelected && c.active)}\r\n              onClick={() => {\r\n                setCanvasTSelected(true);\r\n                drawCanvas2(\r\n                  canvas.current,\r\n                  canvas.current.getContext(\"2d\"),\r\n                  sliderValue,\r\n                  selectedColor,\r\n                  animationActive\r\n                );\r\n              }}\r\n            >\r\n              T-square\r\n            </div>\r\n            <div\r\n              className={cn(c.button, !canvasTSelected && c.active)}\r\n              onClick={() => {\r\n                setCanvasTSelected(false);\r\n                if (canvasTSelected) {\r\n                  drawCanvas(\r\n                    canvas.current,\r\n                    canvas.current.getContext(\"2d\"),\r\n                    sliderValue,\r\n                    selectedColor,\r\n                    animationActive\r\n                  );\r\n                } else {\r\n                  drawCanvas2(\r\n                    canvas.current,\r\n                    canvas.current.getContext(\"2d\"),\r\n                    sliderValue,\r\n                    selectedColor,\r\n                    animationActive\r\n                  );\r\n                }\r\n              }}\r\n            >\r\n              H-tree\r\n            </div>\r\n          </div>\r\n          <div className={c.iterations}>\r\n            <div className={c.title}>Iterations:</div>\r\n            <div className={c.count}>{sliderValue}</div>\r\n          </div>\r\n          <div className=\"slidecontainer\">\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={10}\r\n              step={1}\r\n              value={sliderValue}\r\n              onChange={(e) => {\r\n                // @ts-ignore\r\n                setSliderValue(e.target.value);\r\n                console.log(\"slider value \" + sliderValue);\r\n              }}\r\n              className=\"slider\"\r\n              id=\"myRange\"\r\n            />\r\n            <div className={c.buttonWrapper}>\r\n              <button\r\n                onClick={() => {\r\n                  if (canvasTSelected) {\r\n                    drawCanvas2(\r\n                      canvas.current,\r\n                      canvas.current.getContext(\"2d\"),\r\n                      sliderValue,\r\n                      selectedColor,\r\n                      animationActive\r\n                    );\r\n                  } else {\r\n                    drawCanvas(\r\n                      canvas.current,\r\n                      canvas.current.getContext(\"2d\"),\r\n                      sliderValue,\r\n                      selectedColor,\r\n                      animationActive\r\n                    );\r\n                  }\r\n                }}\r\n              >\r\n                draw\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={c.animation}>\r\n            <div\r\n              className={cn(c.checkbox, animationActive && c.active)}\r\n              onClick={() => {\r\n                setAnimationActive(!animationActive);\r\n              }}\r\n            ></div>\r\n            <div className={c.title}> Step by step animation</div>\r\n          </div>\r\n          <div className={c.color}>\r\n            <div className={c.color__title}>Color</div>\r\n            <div className={c.color__selectWrapper}>\r\n              <select\r\n                onChange={(e) => {\r\n                  setSelectedColor(e.target.value);\r\n                }}\r\n              >\r\n                <option value=\"purple\">Purple</option>\r\n                <option value=\"green\">Green</option>\r\n                <option selected value=\"black\">\r\n                  Black\r\n                </option>\r\n                <option value=\"red\">Red</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </SecondLayout>\r\n      <div className={c.main}>\r\n        <canvas ref={canvas} id=\"c\" height=\"600\" width=\"840\"></canvas>\r\n        {/* <canvas id=\"d\" height=\"600\" width=\"840\"></canvas> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\projects\\labFractals\\fractals\\src\\pages\\ColorModels\\ColorModels.jsx",[],"C:\\projects\\labFractals\\fractals\\src\\pages\\AffineTransformations\\AffineTransformations.jsx",[],"C:\\projects\\labFractals\\fractals\\src\\pages\\Main\\Main.jsx",[],"C:\\projects\\labFractals\\fractals\\src\\pages\\Fractals\\fractal\\fractal.js",["85"],"export const drawCanvas = (canvas, context, depth, color, animationActive) => {\r\n  context.strokeStyle = color;\r\n  console.log(depth);\r\n  const center = {\r\n    x: canvas.width / 2.0,\r\n    y: canvas.height / 2.0,\r\n  };\r\n\r\n  // constants\r\n  const sqrt2 = Math.sqrt(2);\r\n  const len = canvas.width / sqrt2 / sqrt2;\r\n\r\n  // recursive func\r\n  const hTree = async (point, len, depth) => {\r\n    if (depth === 0) {\r\n      return;\r\n    }\r\n    if (animationActive) {\r\n      await sleep(1000);\r\n    }\r\n    // draw horizontal line\r\n    const h1 = { x: point.x - len / 2.0, y: point.y };\r\n    const h2 = { x: point.x + len / 2.0, y: point.y };\r\n    drawLine(h1, h2);\r\n\r\n    // draw vertical lines\r\n    len = len / sqrt2;\r\n\r\n    const v1 = { x: h1.x, y: h1.y - len / 2.0 };\r\n    const v2 = { x: h1.x, y: h1.y + len / 2.0 };\r\n    drawLine(v1, v2);\r\n\r\n    const v3 = { x: h2.x, y: h2.y - len / 2.0 };\r\n    const v4 = { x: h2.x, y: h2.y + len / 2.0 };\r\n    drawLine(v3, v4);\r\n\r\n    // compute new length, depth\r\n    depth--;\r\n    len = len / sqrt2;\r\n\r\n    // recurse recurse recurse recurse\r\n    hTree(v1, len, depth);\r\n    hTree(v2, len, depth);\r\n    hTree(v3, len, depth);\r\n    hTree(v4, len, depth);\r\n  };\r\n\r\n  // line helper\r\n  const drawLine = (from, to) => {\r\n    // if (animationActive) {\r\n    //   setTimeout(() => {\r\n    //     context.beginPath();\r\n    //     context.moveTo(from.x, from.y);\r\n    //     context.lineTo(to.x, to.y);\r\n    //     context.stroke();\r\n    //   }, 2000);\r\n    // } else {\r\n    //   context.beginPath();\r\n    //   context.moveTo(from.x, from.y);\r\n    //   context.lineTo(to.x, to.y);\r\n    //   context.stroke();\r\n    // }\r\n    context.beginPath();\r\n    context.moveTo(from.x, from.y);\r\n    context.lineTo(to.x, to.y);\r\n    context.stroke();\r\n  };\r\n\r\n  // paint helper\r\n  const paint = () => {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    hTree(center, len, depth);\r\n  };\r\n\r\n  // fire away\r\n  paint();\r\n};\r\n\r\nlet depth = 2;\r\nfunction sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\nexport const drawCanvas2 = (\r\n  canvas1,\r\n  context1,\r\n  depth1,\r\n  color,\r\n  animationActive\r\n) => {\r\n  context1.strokeStyle = \"#00386B\";\r\n\r\n  const center1 = {\r\n    x: canvas1.width / 2.0,\r\n    y: canvas1.height / 2.0,\r\n  };\r\n\r\n  const len1 = canvas1.height / 2;\r\n\r\n  const paint1 = async () => {\r\n    context1.clearRect(0, 0, canvas1.width, canvas1.height);\r\n    tSquare(center1, len1, depth1);\r\n  };\r\n\r\n  const tSquare = async (point, length1, depth) => {\r\n    if (depth === 0) {\r\n      return;\r\n    }\r\n    // draw central square\r\n    context1.fillStyle = color;\r\n    if (animationActive) {\r\n      await sleep(1000);\r\n    }\r\n\r\n    context1.fillRect(\r\n      point.x - length1 / 2,\r\n      point.y - length1 / 2,\r\n      length1,\r\n      length1\r\n    );\r\n    depth--;\r\n    length1 = length1 / 2;\r\n\r\n    var v1 = { x: point.x - length1, y: point.y - length1 };\r\n    var v2 = { x: point.x + length1, y: point.y + length1 };\r\n\r\n    var v3 = { x: point.x - length1, y: point.y + length1 };\r\n    var v4 = { x: point.x + length1, y: point.y - length1 };\r\n    // recurse recurse recurse recurse\r\n\r\n    tSquare(v1, length1, depth);\r\n\r\n    tSquare(v2, length1, depth);\r\n\r\n    tSquare(v3, length1, depth);\r\n\r\n    tSquare(v4, length1, depth);\r\n  };\r\n  // window.requestAnimationFrame();\r\n  paint1();\r\n};\r\n","C:\\projects\\labFractals\\fractals\\src\\pages\\ColorModels\\ColorModelsView.jsx",["86","87","88"],"C:\\projects\\labFractals\\fractals\\src\\pages\\ColorModels\\ColorModelsProperties.jsx",[],"C:\\projects\\labFractals\\fractals\\src\\pages\\AffineTransformations\\AffineTransformationsProperties.jsx",[],"C:\\projects\\labFractals\\fractals\\src\\layouts\\MainWrapper.jsx",[],"C:\\projects\\labFractals\\fractals\\src\\pages\\AffineTransformations\\AffineTransformationsView.jsx",["89","90"],"import React, {useState, useRef, useEffect, useContext} from 'react';\r\nimport {AffineTransformationsContext} from '../../contexts/AffineTransformationsContext';\r\nimport {axisBottom, axisLeft, line, max, min, scaleLinear, select} from 'd3';\r\nimport {scale, rotate, compose, applyToPoint} from 'transformation-matrix';\r\n\r\nconst AffineTransformationsView = () => {\r\n  const {properties} = useContext(AffineTransformationsContext);\r\n  const ref = useRef();\r\n  const requestId = useRef(0);\r\n  const [points, setPoints] = useState([[0, 0], [0, 0], [0, 0], [0, 0]]);\r\n  const [animating, setAnimating] = useState(false);\r\n  const rotationPoint = useRef([0, 0]);\r\n  const xScale = useRef(1);\r\n  const yScale = useRef(1);\r\n  const rotationInRadians = useRef(0);\r\n  const startAnimationTime = useRef(0);\r\n  const initialPoints = useRef([[0, 0], [0, 0], [0, 0], [0, 0]]);\r\n  const animationTime = 3000;\r\n  const pointsName = ['A', 'B', 'C'];\r\n\r\n  const stopAnimation = () => {\r\n    window.cancelAnimationFrame(requestId.current);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const {\r\n      points: entryPoints,\r\n      rotationInDegrees,\r\n      rotationPoint: rp,\r\n      xScale: xsc,\r\n      yScale: ysc\r\n    } = properties;\r\n\r\n    rotationPoint.current = entryPoints[rp];\r\n    rotationInRadians.current = rotationInDegrees / 180 * Math.PI;\r\n    initialPoints.current = [...entryPoints, entryPoints[0]];\r\n    xScale.current = xsc;\r\n    yScale.current = ysc;\r\n\r\n    setPoints(initialPoints.current);\r\n\r\n    if (entryPoints.flat(2).filter(p => p !== 0).length) {\r\n      if (animating) {\r\n        setAnimating(false);\r\n        stopAnimation();\r\n      }\r\n\r\n      if (rotationInRadians.current === 0 && xScale.current === 1 && yScale.current === 1) {\r\n\r\n      } else {\r\n        const timerId = setTimeout(() => {\r\n          startAnimationTime.current = performance.now();\r\n\r\n          setAnimating(true);\r\n        }, 1000);\r\n\r\n        return () => {\r\n          clearTimeout(timerId);\r\n        };\r\n      }\r\n    }\r\n  }, [properties]);\r\n\r\n  useEffect(() => {\r\n    const svg = select(ref.current);\r\n\r\n    const width = 600, height = 600;\r\n\r\n    const x = points.map(p => p[0]);\r\n    const y = points.map(p => p[1]);\r\n\r\n    const xScale = scaleLinear().domain([min(x) - 3, max(x) + 3]).range([0, width]);\r\n    const yScale = scaleLinear().domain([min(y) - 3, max(y) + 3]).range([height, 0]);\r\n\r\n    const xAxis = axisBottom(xScale);\r\n    const yAxis = axisLeft(yScale);\r\n\r\n    const myLine = line()\r\n      .x(([x, y]) => xScale(x))\r\n      .y(([x, y]) => yScale(y));\r\n\r\n    svg\r\n      .style('overflow', 'visible')\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .selectAll('path')\r\n      .data([points])\r\n      .join('path')\r\n      .attr('d', myLine)\r\n      .attr('fill', 'none')\r\n      .attr('stroke', 'blue');\r\n\r\n    svg\r\n      .select('.x-axis')\r\n      .style('transform', `translateY(${height / 2}px)`)\r\n      .call(xAxis);\r\n\r\n    svg\r\n      .select('.y-axis')\r\n      .style('transform', `translateX(${width / 2}px)`)\r\n      .call(yAxis);\r\n\r\n    if (points.filter((el) => el[0] !== 0 && el[1] !== 0).length) {\r\n      svg\r\n        .select('.pointsLabels')\r\n        .selectAll('text')\r\n        .data(points)\r\n        .join('text')\r\n        .attr('x', (d) => xScale(d[0] + 0.2))\r\n        .attr('y', (d) => yScale(d[1] - 0.2))\r\n        .text((d, i) => pointsName[i]);\r\n    }\r\n\r\n    const pos = [[width + 10, height / 2], [width / 2, -10]];\r\n    const axesNames = ['X', 'Y'];\r\n\r\n    svg\r\n      .select('.axesLabels')\r\n      .selectAll('text')\r\n      .data(pos)\r\n      .join('text')\r\n      .attr('x', (d) => d[0])\r\n      .attr('y', (d) => d[1])\r\n      .text((d, i) => axesNames[i]);\r\n\r\n  }, [points]);\r\n\r\n  useEffect(() => {\r\n    if (animating) {\r\n      requestId.current = requestAnimationFrame(() => {\r\n        let timeDifference = performance.now() - startAnimationTime.current;\r\n\r\n        const rp = rotationPoint.current;\r\n        const initPoints = initialPoints.current;\r\n        const rotation = rotationInRadians.current;\r\n\r\n        if (timeDifference > animationTime) {\r\n          setAnimating(false);\r\n          timeDifference = animationTime;\r\n        }\r\n\r\n        const partTime = timeDifference / animationTime;\r\n\r\n        setPoints(prevPoints => (\r\n          prevPoints.map((p, i) => {\r\n            const initPoint = {\r\n              x: initPoints[i][0],\r\n              y: initPoints[i][1]\r\n            };\r\n            const matrix = compose(\r\n              rotate(rotation * partTime, rp[0], rp[1]),\r\n              scale((xScale.current - 1) * partTime + 1, (yScale.current - 1) * partTime + 1)\r\n            );\r\n            const {x, y} = applyToPoint(\r\n              matrix, initPoint\r\n            );\r\n\r\n            return [x, y];\r\n          })\r\n        ));\r\n      });\r\n\r\n      return () => {\r\n        stopAnimation();\r\n      };\r\n    }\r\n  });\r\n\r\n  return (\r\n    <svg ref={ref} style={{padding: 40}}>\r\n      <path/>\r\n      <g className={'x-axis'}/>\r\n      <g className={'y-axis'}/>\r\n      <g className={'pointsLabels'}/>\r\n      <g className={'axesLabels'}/>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default AffineTransformationsView;","C:\\projects\\labFractals\\fractals\\src\\layouts\\SecondLayout.jsx",[],"C:\\projects\\labFractals\\fractals\\src\\pages\\ColorModels\\ConvertColorProperties.jsx",[],"C:\\projects\\labFractals\\fractals\\src\\pages\\ColorModels\\FileProperties.jsx",["91"],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":26,"column":6,"nodeType":"98","endLine":26,"endColumn":8,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":80,"column":5,"nodeType":"102","messageId":"103","endLine":80,"endColumn":10},{"ruleId":"100","severity":1,"message":"104","line":6,"column":9,"nodeType":"102","messageId":"103","endLine":6,"endColumn":14},{"ruleId":"96","severity":1,"message":"105","line":80,"column":6,"nodeType":"98","endLine":80,"endColumn":15,"suggestions":"106"},{"ruleId":"96","severity":1,"message":"107","line":91,"column":6,"nodeType":"98","endLine":91,"endColumn":38,"suggestions":"108"},{"ruleId":"96","severity":1,"message":"109","line":62,"column":6,"nodeType":"98","endLine":62,"endColumn":18,"suggestions":"110"},{"ruleId":"96","severity":1,"message":"111","line":126,"column":6,"nodeType":"98","endLine":126,"endColumn":14,"suggestions":"112"},{"ruleId":"100","severity":1,"message":"113","line":4,"column":8,"nodeType":"102","messageId":"103","endLine":4,"endColumn":10},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'animationActive', 'canvasTSelected', and 'sliderValue'. Either include them or remove the dependency array.","ArrayExpression",["116"],"no-unused-vars","'depth' is assigned a value but never used.","Identifier","unusedVar","'files' is defined but never used.","React Hook useEffect has a missing dependency: 'onLoadImage'. Either include it or remove the dependency array.",["117"],"React Hook useEffect has a missing dependency: 'filter'. Either include it or remove the dependency array.",["118"],"React Hook useEffect has a missing dependency: 'animating'. Either include it or remove the dependency array.",["119"],"React Hook useEffect has a missing dependency: 'pointsName'. Either include it or remove the dependency array.",["120"],"'cn' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [animationActive, canvasTSelected, sliderValue]",{"range":"131","text":"132"},"Update the dependencies array to be: [fileSrc, onLoadImage]",{"range":"133","text":"134"},"Update the dependencies array to be: [isImageLoaded, greenSaturation, filter]",{"range":"135","text":"136"},"Update the dependencies array to be: [animating, properties]",{"range":"137","text":"138"},"Update the dependencies array to be: [points, pointsName]",{"range":"139","text":"140"},[1068,1070],"[animationActive, canvasTSelected, sliderValue]",[2364,2373],"[fileSrc, onLoadImage]",[2702,2734],"[isImageLoaded, greenSaturation, filter]",[1989,2001],"[animating, properties]",[3674,3682],"[points, pointsName]"]